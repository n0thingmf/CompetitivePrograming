#include<bits/stdc++.h>
#define pb push_back
#define ll long long
#define popb pop_back
#define all(A) A.begin(),A.end()
#define rall(A) A.rbegin(),A.rend()
#define dic unordered_map
#define bpc __builtin_popcountll//numero de bits para long long
#define bclz __builtin_clzll//leading zeros para ll
#define max_bit(A) 31-__builtin_clz(A)

using namespace std;
const int maxn=1e3+2;
ll sum[maxn][maxn];
ll srec1[maxn][maxn];
ll t1x[4*maxn];
ll t1y[4*maxn];
ll srec2[maxn][maxn];
ll t2x[4*maxn];
ll t2y[4*maxn];
ll a[maxn];
ll combine(ll a,ll b){
    return max(a,b);
}
void build(ll t[],ll a[],int v,int l,int r){
    if(l==r){
        t[v]=a[l];
        return;
    }
    int m=(l+r)/2;
    build(t,a,2*v,l,m);
    build(t,a,2*v+1,m+1,r);
    t[v]=combine(t[2*v],t[2*v+1]);
}
ll query(ll t[],int v,int ql,int qr,int l,int r){
    if(ql>qr) return -1;
    if(ql==l && qr==r) return t[v];
    int m=(l+r)/2;
    return combine(query(t,2*v,ql,min(m,qr),l,m),query(t,2*v+1,max(ql,m+1),qr,m+1,r));
}
int main(){
	ios::sync_with_stdio(false);
	cin.tie(0);
    int r,c,x,y;
    cin>>r>>c>>x>>y;
    for(int i=1;i<=r;i++){
        for(int j=1;j<=c;j++){
            cin>>sum[i][j];
        }
    }
    for(int i=1;i<=r;i++){
        for(int j=1;j<=c;j++){
            sum[i][j]+=sum[i][j-1];
        }
    }
    for(int j=1;j<=c;j++){
        for(int i=1;i<=r;i++){
            sum[i][j]+=sum[i-1][j];
        }
    }
//sumas rec caso 1
    for(int i=0;i+x<=r;i++){
        for(int j=0;j+y<=c;j++){
            srec1[i][j]=sum[i+x][j+y]-sum[i+x][j]-sum[i][j+y]+sum[i][j];
        }
    }
//sumas rec caso 2
    for(int i=0;i+y<=r;i++){
        for(int j=0;j+x<=c;j++){
            srec2[i][j]=sum[i+y][j+x]-sum[i+y][j]-sum[i][j+x]+sum[i][j];
        }
    }
//maximos caso 1

    for(int i=0;i+x<=r;i++){
        a[i]=-1;
        for(int j=0;j+y<=c;j++){
            a[i]=max(a[i],srec1[i][j]);
        }
    }
    build(t1x,a,1,0,r-x);
    for(int j=0;j+y<=c;j++){
        a[j]=-1;
        for(int i=0;i+x<=r;i++){
            a[j]=max(a[j],srec1[i][j]);
        }
    }
    build(t1y,a,1,0,c-y);
//maximos caso 2
    for(int i=0;i+y<=r;i++){
        a[i]=-1;
        for(int j=0;j+x<=c;j++){
            a[i]=max(a[i],srec2[i][j]);
        }
    }
    build(t2x,a,1,0,r-y);
    for(int j=0;j+x<=c;j++){
        a[j]=-1;
        for(int i=0;i+y<=r;i++){
            a[j]=max(a[j],srec2[i][j]);
        }
    }
    build(t2y,a,1,0,c-x);
    ll ans=-1;
    for(int i=0;i+x<=r;i++){
        for(int j=0;j+y<=c;j++){
            ll resx,resy;
            //x,y
            resx=max(query(t1x,1,0,i-x,0,r-x),query(t1x,1,i+x+1,r-x,0,r-x));
            resy=max(query(t1y,1,0,j-y,0,c-y),query(t1y,1,j+y+1,c-y,0,c-y));
            ans=max(ans,srec1[i][j]+max(resx,resy));
            //y,x
            resx=max(query(t2x,1,0,i-y,0,r-y),query(t2x,1,i+x+1,r-y,0,r-y));
            resy=max(query(t2y,1,0,j-x,0,c-x),query(t2y,1,j+y+1,c-x,0,c-x));
            ans=max(ans,srec1[i][j]+max(resx,resy));
        }
    }

    for(int i=0;i+y<=r;i++){
        for(int j=0;j+x<=c;j++){
            ll resx,resy;
            //x,y
            resx=max(query(t1x,1,0,i-x,0,r-x),query(t1x,1,i+y+1,r-x,0,r-x));
            resy=max(query(t1y,1,0,j-y,0,c-y),query(t1y,1,j+x+1,c-y,0,c-y));
            ans=max(ans,srec2[i][j]+max(resx,resy));
            //y,x
            resx=max(query(t2x,1,0,i-y,0,r-y),query(t2x,1,i+y+1,r-y,0,r-y));
            resy=max(query(t2y,1,0,j-x,0,c-x),query(t2y,1,j+x+1,c-x,0,c-x));
            ans=max(ans,srec2[i][j]+max(resx,resy));
        }
    }
/*
    for(int i=1;i<=r;i++){
        for(int j=1;j<=c;j++){
            cout<<sum[i][j]<<" ";
        }
        cout<<"\n";
    }*/
    cout<<ans<<"\n";
	return 0;
	// you should actually read the stuff at the bottom
}

/* stuff you should look for
	* int overflow, array bounds
	* bitwise and boolean operations
	* special cases (n=1?)
	* do smth instead of nothing and stay organized
	* WRITE STUFF DOWN
	* DON'T GET STUCK ON ONE APPROACH
*/
